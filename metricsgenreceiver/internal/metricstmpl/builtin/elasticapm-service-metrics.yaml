resourceMetrics:
  - resource:
      attributes:
        - { key: agent.name, value: { stringValue: otlp/go } }
        - { key: deployment.environment, value: { stringValue: qa } }
        - { key: service.name, value: { stringValue: foo } }
        - { key: telemetry.sdk.language, value: { stringValue: go } }
    scopeMetrics:
      - metrics:
          - description: Success count as a metric for service transaction
            name: event.success_count
            unit: us
            histogram:
              aggregationTemporality: 1
              dataPoints:
                - attributes:
                    - { key: data_stream.dataset, value: { stringValue: service_transaction.1m } }
                    - { key: elasticsearch.mapping.hints, value: { arrayValue: { values: [ { stringValue: aggregate_metric_double } ] } } }
                    - { key: metricset.interval, value: { stringValue: 1m } }
                    - { key: metricset.name, value: { stringValue: service_transaction } }
                    - { key: processor.event, value: { stringValue: metric } }
                    - { key: transaction.root, value: { boolValue: true } }
                    - { key: transaction.type, value: { stringValue: request } }
                  bucketCounts: [ "2", "0" ]
                  count: "2"
                  explicitBounds: [ 1 ]
                  sum: 1
                  timeUnixNano: "1000000"
          - name: service_summary
            sum:
              aggregationTemporality: 1
              dataPoints:
                - asInt: "2"
                  attributes:
                    - { key: data_stream.dataset, value: { stringValue: service_summary.1m } }
                    - { key: metricset.interval, value: { stringValue: 1m } }
                    - { key: metricset.name, value: { stringValue: service_summary } }
                    - { key: processor.event, value: { stringValue: metric } }
                  timeUnixNano: "1000000"
          - description: APM service transaction aggregated metrics as histogram
            name: transaction.duration.histogram
            unit: us
            histogram:
              aggregationTemporality: 1
              dataPoints:
                - attributes:
                    - { key: data_stream.dataset, value: { stringValue: service_transaction.1m } }
                    - { key: elasticsearch.mapping.hints, value: { arrayValue: { values: [ { stringValue: _doc_count } ] } } }
                    - { key: metricset.interval, value: { stringValue: 1m } }
                    - { key: metricset.name, value: { stringValue: service_transaction } }
                    - { key: processor.event, value: { stringValue: metric } }
                    - { key: transaction.root, value: { boolValue: true } }
                    - { key: transaction.type, value: { stringValue: request } }
                  bucketCounts: [ "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "2" ]
                  count: "2"
                  explicitBounds: [ 5000, 10000, 25000, 50000, 75000, 100000, 250000, 500000, 750000, 1e+06, 2.5e+06, 5e+06, 7.5e+06, 1e+07 ]
                  sum: 2.2e+07
                  timeUnixNano: "1000000"
          - description: APM service transaction aggregated metrics as summary
            name: transaction.duration.summary
            unit: us
            histogram:
              aggregationTemporality: 1
              dataPoints:
                - attributes:
                    - { key: data_stream.dataset, value: { stringValue: service_transaction.1m } }
                    - { key: elasticsearch.mapping.hints, value: { arrayValue: { values: [ { stringValue: aggregate_metric_double } ] } } }
                    - { key: metricset.interval, value: { stringValue: 1m } }
                    - { key: metricset.name, value: { stringValue: service_transaction } }
                    - { key: processor.event, value: { stringValue: metric } }
                    - { key: transaction.root, value: { boolValue: true } }
                    - { key: transaction.type, value: { stringValue: request } }
                  bucketCounts: [ "0", "2" ]
                  count: "2"
                  explicitBounds: [ 1 ]
                  sum: 2.2e+07
                  timeUnixNano: "1000000"
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/connector/signaltometricsconnector
